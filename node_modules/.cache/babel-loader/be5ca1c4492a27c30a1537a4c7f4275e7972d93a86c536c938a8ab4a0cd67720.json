{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/ss/Desktop/CodingNinja/MERN/code-Notes/React/Projects/calculator/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/ss/Desktop/CodingNinja/MERN/code-Notes/React/Projects/calculator/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.typeImplementation = typeImplementation;\nvar _utils = require(\"../utils\");\nvar _click = require(\"../click\");\nvar _keyboard = require(\"../keyboard\");\nfunction typeImplementation(_x, _x2, _x3) {\n  return _typeImplementation.apply(this, arguments);\n}\nfunction _typeImplementation() {\n  _typeImplementation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(element, text, _ref) {\n    var delay, _ref$skipClick, skipClick, _ref$skipAutoClose, skipAutoClose, _ref$initialSelection, initialSelectionStart, _ref$initialSelection2, initialSelectionEnd, currentElement, value, _ref2, selectionStart, selectionEnd, _ref3, promise, releaseAllKeys;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            delay = _ref.delay, _ref$skipClick = _ref.skipClick, skipClick = _ref$skipClick === void 0 ? false : _ref$skipClick, _ref$skipAutoClose = _ref.skipAutoClose, skipAutoClose = _ref$skipAutoClose === void 0 ? false : _ref$skipAutoClose, _ref$initialSelection = _ref.initialSelectionStart, initialSelectionStart = _ref$initialSelection === void 0 ? undefined : _ref$initialSelection, _ref$initialSelection2 = _ref.initialSelectionEnd, initialSelectionEnd = _ref$initialSelection2 === void 0 ? undefined : _ref$initialSelection2;\n            if (!element.disabled) {\n              _context.next = 3;\n              break;\n            }\n            return _context.abrupt(\"return\");\n          case 3:\n            if (!skipClick) (0, _click.click)(element); // The focused element could change between each event, so get the currently active element each time\n            currentElement = function currentElement() {\n              return (0, _utils.getActiveElement)(element.ownerDocument);\n            }; // by default, a new element has its selection start and end at 0\n            // but most of the time when people call \"type\", they expect it to type\n            // at the end of the current input value. So, if the selection start\n            // and end are both the default of 0, then we'll go ahead and change\n            // them to the length of the current value.\n            // the only time it would make sense to pass the initialSelectionStart or\n            // initialSelectionEnd is if you have an input with a value and want to\n            // explicitly start typing with the cursor at 0. Not super common.\n            value = (0, _utils.getValue)(currentElement());\n            _ref2 = (0, _utils.getSelectionRange)(element), selectionStart = _ref2.selectionStart, selectionEnd = _ref2.selectionEnd;\n            if (value != null && (selectionStart === null || selectionStart === 0) && (selectionEnd === null || selectionEnd === 0)) {\n              (0, _utils.setSelectionRange)(currentElement(), initialSelectionStart != null ? initialSelectionStart : value.length, initialSelectionEnd != null ? initialSelectionEnd : value.length);\n            }\n            _ref3 = (0, _keyboard.keyboardImplementationWrapper)(text, {\n              delay: delay,\n              document: element.ownerDocument\n            }), promise = _ref3.promise, releaseAllKeys = _ref3.releaseAllKeys;\n            if (!(delay > 0)) {\n              _context.next = 12;\n              break;\n            }\n            _context.next = 12;\n            return promise;\n          case 12:\n            if (!skipAutoClose) {\n              releaseAllKeys();\n            } // eslint-disable-next-line consistent-return -- we need to return the internal Promise so that it is catchable if we don't await\n            return _context.abrupt(\"return\", promise);\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _typeImplementation.apply(this, arguments);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","typeImplementation","_utils","require","_click","_keyboard","element","text","delay","skipClick","skipAutoClose","initialSelectionStart","undefined","initialSelectionEnd","disabled","click","currentElement","getActiveElement","ownerDocument","getValue","getSelectionRange","selectionStart","selectionEnd","setSelectionRange","length","keyboardImplementationWrapper","document","promise","releaseAllKeys"],"sources":["C:/Users/ss/Desktop/CodingNinja/MERN/code-Notes/React/Projects/calculator/node_modules/@testing-library/user-event/dist/type/typeImplementation.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.typeImplementation = typeImplementation;\n\nvar _utils = require(\"../utils\");\n\nvar _click = require(\"../click\");\n\nvar _keyboard = require(\"../keyboard\");\n\nasync function typeImplementation(element, text, {\n  delay,\n  skipClick = false,\n  skipAutoClose = false,\n  initialSelectionStart = undefined,\n  initialSelectionEnd = undefined\n}) {\n  // TODO: properly type guard\n  // we use this workaround for now to prevent changing behavior\n  if (element.disabled) return;\n  if (!skipClick) (0, _click.click)(element); // The focused element could change between each event, so get the currently active element each time\n\n  const currentElement = () => (0, _utils.getActiveElement)(element.ownerDocument); // by default, a new element has its selection start and end at 0\n  // but most of the time when people call \"type\", they expect it to type\n  // at the end of the current input value. So, if the selection start\n  // and end are both the default of 0, then we'll go ahead and change\n  // them to the length of the current value.\n  // the only time it would make sense to pass the initialSelectionStart or\n  // initialSelectionEnd is if you have an input with a value and want to\n  // explicitly start typing with the cursor at 0. Not super common.\n\n\n  const value = (0, _utils.getValue)(currentElement());\n  const {\n    selectionStart,\n    selectionEnd\n  } = (0, _utils.getSelectionRange)(element);\n\n  if (value != null && (selectionStart === null || selectionStart === 0) && (selectionEnd === null || selectionEnd === 0)) {\n    (0, _utils.setSelectionRange)(currentElement(), initialSelectionStart != null ? initialSelectionStart : value.length, initialSelectionEnd != null ? initialSelectionEnd : value.length);\n  }\n\n  const {\n    promise,\n    releaseAllKeys\n  } = (0, _keyboard.keyboardImplementationWrapper)(text, {\n    delay,\n    document: element.ownerDocument\n  });\n\n  if (delay > 0) {\n    await promise;\n  }\n\n  if (!skipAutoClose) {\n    releaseAllKeys();\n  } // eslint-disable-next-line consistent-return -- we need to return the internal Promise so that it is catchable if we don't await\n\n\n  return promise;\n}"],"mappings":"AAAA,YAAY;;AAAC;AAAA;AAEbA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,kBAAkB,GAAGA,kBAAkB;AAE/C,IAAIC,MAAM,GAAGC,OAAO,CAAC,UAAU,CAAC;AAEhC,IAAIC,MAAM,GAAGD,OAAO,CAAC,UAAU,CAAC;AAEhC,IAAIE,SAAS,GAAGF,OAAO,CAAC,aAAa,CAAC;AAAC,SAExBF,kBAAkB;EAAA;AAAA;AAAA;EAAA,iFAAjC,iBAAkCK,OAAO,EAAEC,IAAI;IAAA;IAAA;MAAA;QAAA;UAAA;YAC7CC,KAAK,QAALA,KAAK,wBACLC,SAAS,EAATA,SAAS,+BAAG,KAAK,6CACjBC,aAAa,EAAbA,aAAa,mCAAG,KAAK,oDACrBC,qBAAqB,EAArBA,qBAAqB,sCAAGC,SAAS,wDACjCC,mBAAmB,EAAnBA,mBAAmB,uCAAGD,SAAS;YAAA,KAI3BN,OAAO,CAACQ,QAAQ;cAAA;cAAA;YAAA;YAAA;UAAA;YACpB,IAAI,CAACL,SAAS,EAAE,CAAC,CAAC,EAAEL,MAAM,CAACW,KAAK,EAAET,OAAO,CAAC,CAAC,CAAC;YAEtCU,cAAc,GAAG,SAAjBA,cAAc;cAAA,OAAS,CAAC,CAAC,EAAEd,MAAM,CAACe,gBAAgB,EAAEX,OAAO,CAACY,aAAa,CAAC;YAAA,GAAE;YAClF;YACA;YACA;YACA;YACA;YACA;YACA;YAGMlB,KAAK,GAAG,CAAC,CAAC,EAAEE,MAAM,CAACiB,QAAQ,EAAEH,cAAc,EAAE,CAAC;YAAA,QAIhD,CAAC,CAAC,EAAEd,MAAM,CAACkB,iBAAiB,EAAEd,OAAO,CAAC,EAFxCe,cAAc,SAAdA,cAAc,EACdC,YAAY,SAAZA,YAAY;YAGd,IAAItB,KAAK,IAAI,IAAI,KAAKqB,cAAc,KAAK,IAAI,IAAIA,cAAc,KAAK,CAAC,CAAC,KAAKC,YAAY,KAAK,IAAI,IAAIA,YAAY,KAAK,CAAC,CAAC,EAAE;cACvH,CAAC,CAAC,EAAEpB,MAAM,CAACqB,iBAAiB,EAAEP,cAAc,EAAE,EAAEL,qBAAqB,IAAI,IAAI,GAAGA,qBAAqB,GAAGX,KAAK,CAACwB,MAAM,EAAEX,mBAAmB,IAAI,IAAI,GAAGA,mBAAmB,GAAGb,KAAK,CAACwB,MAAM,CAAC;YACzL;YAAC,QAKG,CAAC,CAAC,EAAEnB,SAAS,CAACoB,6BAA6B,EAAElB,IAAI,EAAE;cACrDC,KAAK,EAALA,KAAK;cACLkB,QAAQ,EAAEpB,OAAO,CAACY;YACpB,CAAC,CAAC,EALAS,OAAO,SAAPA,OAAO,EACPC,cAAc,SAAdA,cAAc;YAAA,MAMZpB,KAAK,GAAG,CAAC;cAAA;cAAA;YAAA;YAAA;YAAA,OACLmB,OAAO;UAAA;YAGf,IAAI,CAACjB,aAAa,EAAE;cAClBkB,cAAc,EAAE;YAClB,CAAC,CAAC;YAAA,iCAGKD,OAAO;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACf;EAAA;AAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}